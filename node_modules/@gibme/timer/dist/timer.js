"use strict";
// Copyright (c) 2016-2023, Brandon Lehmann <brandonlehmann@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Timer = void 0;
const events_1 = require("events");
class Timer extends events_1.EventEmitter {
    /**
     * Constructs a new instance of the timer
     *
     * Note: If additional arguments are specified, then those arguments will be
     * provided with every tick event emitted except arguments that may be included
     * with calls to the `tick()` method.
     *
     * @param interval
     * @param autoStart
     * @param args
     */
    constructor(interval, autoStart = false, ...args) {
        super();
        this.interval = interval;
        this.paused = true;
        this._destroyed = false;
        if (autoStart) {
            this.paused = false;
        }
        const tick = () => {
            if (!this.paused) {
                this.tick(...args);
            }
            if (!this._destroyed) {
                this._timer = setTimeout(tick, this.interval);
            }
        };
        tick();
    }
    /**
     * Returns if the timer has been destroyed
     */
    get destroyed() {
        return this._destroyed;
    }
    /** @ignore */
    on(event, listener) {
        return super.on(event, listener);
    }
    /** @ignore */
    once(event, listener) {
        return super.on(event, listener);
    }
    /**
     * Destroys the timer
     */
    destroy() {
        this._destroyed = true;
        if (this._timer) {
            clearTimeout(this._timer);
        }
        delete this._timer;
    }
    /**
     * Starts the timer
     */
    start() {
        this.paused = false;
    }
    /**
     * Stops the timer
     */
    stop() {
        this.paused = true;
    }
    /**
     * Forces a tick event to be emitted with the specified arguments
     *
     * @param args
     */
    tick(...args) {
        this.emit('tick', ...args);
    }
    /**
     * Toggles the timer on/off
     */
    toggle() {
        this.paused = (!this.paused);
        return this.paused;
    }
}
exports.default = Timer;
exports.Timer = Timer;
