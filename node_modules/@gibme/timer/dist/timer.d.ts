/// <reference types="node" />
import { EventEmitter } from 'events';
export default class Timer extends EventEmitter {
    interval: number;
    paused: boolean;
    private _timer?;
    /**
     * Constructs a new instance of the timer
     *
     * Note: If additional arguments are specified, then those arguments will be
     * provided with every tick event emitted except arguments that may be included
     * with calls to the `tick()` method.
     *
     * @param interval
     * @param autoStart
     * @param args
     */
    constructor(interval: number, autoStart?: boolean, ...args: any[]);
    private _destroyed;
    /**
     * Returns if the timer has been destroyed
     */
    get destroyed(): boolean;
    /**
     * Event that is emitted every time a tick occurs
     * @param event
     * @param listener
     */
    on(event: 'tick', listener: (...args: any[]) => void): this;
    /**
     * Event that is emitted only once when a tick occurs
     *
     * @param event
     * @param listener
     */
    once(event: 'tick', listener: (...args: any[]) => void): this;
    /**
     * Destroys the timer
     */
    destroy(): void;
    /**
     * Starts the timer
     */
    start(): void;
    /**
     * Stops the timer
     */
    stop(): void;
    /**
     * Forces a tick event to be emitted with the specified arguments
     *
     * @param args
     */
    tick(...args: any[]): void;
    /**
     * Toggles the timer on/off
     */
    toggle(): boolean;
}
export { Timer };
